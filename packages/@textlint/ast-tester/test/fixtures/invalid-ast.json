{
  "type": "Document",
  "children": [
    {
      "type": "Header",
      "depth": 2,
      "children": [
        {
          "type": "Str",
          "value": "意図したテストを書くには",
          "loc": {
            "start": {
              "line": 2,
              "column": 3
            },
            "end": {
              "line": 2,
              "column": 15
            }
          },
          "range": [
            26,
            38
          ],
          "raw": "意図したテストを書くには"
        }
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 3
        },
        "end": {
          "line": 2,
          "column": 15
        }
      },
      "range": [
        26,
        38
      ],
      "raw": "意図したテストを書くには"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "ここでいう意図したテストとは以下のような定義で進めます。",
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 28
            }
          },
          "range": [
            40,
            68
          ],
          "raw": "ここでいう意図したテストとは以下のような定義で進めます。"
        }
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 28
        }
      },
      "range": [
        40,
        68
      ],
      "raw": "ここでいう意図したテストとは以下のような定義で進めます。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "あるpromiseオブジェクトをテスト対象として",
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 24
            }
          },
          "range": [
            70,
            94
          ],
          "raw": "あるpromiseオブジェクトをテスト対象として"
        }
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 24
        }
      },
      "range": [
        70,
        94
      ],
      "raw": "あるpromiseオブジェクトをテスト対象として"
    },
    {
      "type": "List",
      "children": [
        {
          "type": "ListItem",
          "children": [
            {
              "type": "Paragraph",
              "children": [
                {
                  "type": "Str",
                  "value": "Fulfilledされることを期待したテストを書いた時",
                  "loc": {
                    "start": {
                      "line": 8,
                      "column": 2
                    },
                    "end": {
                      "line": 8,
                      "column": 29
                    }
                  },
                  "range": [
                    98,
                    125
                  ],
                  "raw": "Fulfilledされることを期待したテストを書いた時"
                }
              ],
              "loc": {
                "start": {
                  "line": 8,
                  "column": 2
                },
                "end": {
                  "line": 8,
                  "column": 29
                }
              },
              "range": [
                98,
                125
              ],
              "raw": "Fulfilledされることを期待したテストを書いた時"
            },
            {
              "type": "List",
              "children": [
                {
                  "type": "ListItem",
                  "children": [
                    {
                      "type": "Paragraph",
                      "children": [
                        {
                          "type": "Str",
                          "value": "Rejectedとなった場合は**Fail**",
                          "loc": {
                            "start": {
                              "line": 9,
                              "column": 3
                            },
                            "end": {
                              "line": 9,
                              "column": 26
                            }
                          },
                          "range": [
                            129,
                            152
                          ],
                          "raw": "Rejectedとなった場合は**Fail**"
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 9,
                          "column": 3
                        },
                        "end": {
                          "line": 9,
                          "column": 26
                        }
                      },
                      "range": [
                        129,
                        152
                      ],
                      "raw": "Rejectedとなった場合は**Fail**"
                    }
                  ],
                  "raw": "",
                  "loc": {
                    "start": {
                      "line": 9,
                      "column": 3
                    },
                    "end": {
                      "line": 9,
                      "column": 26
                    }
                  },
                  "range": [
                    129,
                    152
                  ]
                },
                {
                  "type": "ListItem",
                  "children": [
                    {
                      "type": "Paragraph",
                      "children": [
                        {
                          "type": "Str",
                          "value": "assertionの結果が一致しなかった場合は**Fail**",
                          "loc": {
                            "start": {
                              "line": 10,
                              "column": 3
                            },
                            "end": {
                              "line": 10,
                              "column": 34
                            }
                          },
                          "range": [
                            156,
                            187
                          ],
                          "raw": "assertionの結果が一致しなかった場合は**Fail**"
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 10,
                          "column": 3
                        },
                        "end": {
                          "line": 10,
                          "column": 34
                        }
                      },
                      "range": [
                        156,
                        187
                      ],
                      "raw": "assertionの結果が一致しなかった場合は**Fail**"
                    }
                  ],
                  "raw": "",
                  "loc": {
                    "start": {
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "line": 10,
                      "column": 34
                    }
                  },
                  "range": [
                    156,
                    187
                  ]
                }
              ],
              "raw": "",
              "loc": {
                "start": {
                  "line": 9,
                  "column": 3
                },
                "end": {
                  "line": 10,
                  "column": 34
                }
              },
              "range": [
                129,
                187
              ]
            }
          ],
          "raw": "",
          "loc": {
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 34
            }
          },
          "range": [
            98,
            187
          ]
        },
        {
          "type": "ListItem",
          "children": [
            {
              "type": "Paragraph",
              "children": [
                {
                  "type": "Str",
                  "value": "Rejectedされることを期待したテストを書いた時",
                  "loc": {
                    "start": {
                      "line": 11,
                      "column": 2
                    },
                    "end": {
                      "line": 11,
                      "column": 28
                    }
                  },
                  "range": [
                    190,
                    216
                  ],
                  "raw": "Rejectedされることを期待したテストを書いた時"
                }
              ],
              "loc": {
                "start": {
                  "line": 11,
                  "column": 2
                },
                "end": {
                  "line": 11,
                  "column": 28
                }
              },
              "range": [
                190,
                216
              ],
              "raw": "Rejectedされることを期待したテストを書いた時"
            },
            {
              "type": "List",
              "children": [
                {
                  "type": "ListItem",
                  "children": [
                    {
                      "type": "Paragraph",
                      "children": [
                        {
                          "type": "Str",
                          "value": "Fulfilledとなった場合は**Fail**",
                          "loc": {
                            "start": {
                              "line": 12,
                              "column": 3
                            },
                            "end": {
                              "line": 12,
                              "column": 27
                            }
                          },
                          "range": [
                            220,
                            244
                          ],
                          "raw": "Fulfilledとなった場合は**Fail**"
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 12,
                          "column": 3
                        },
                        "end": {
                          "line": 12,
                          "column": 27
                        }
                      },
                      "range": [
                        220,
                        244
                      ],
                      "raw": "Fulfilledとなった場合は**Fail**"
                    }
                  ],
                  "raw": "",
                  "loc": {
                    "start": {
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "line": 12,
                      "column": 27
                    }
                  },
                  "range": [
                    220,
                    244
                  ]
                },
                {
                  "type": "ListItem",
                  "children": [
                    {
                      "type": "Paragraph",
                      "children": [
                        {
                          "type": "Str",
                          "value": "assertionの結果が一致しなかった場合は**Fail**",
                          "loc": {
                            "start": {
                              "line": 10,
                              "column": 3
                            },
                            "end": {
                              "line": 10,
                              "column": 34
                            }
                          },
                          "range": [
                            156,
                            187
                          ],
                          "raw": "assertionの結果が一致しなかった場合は**Fail**"
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 10,
                          "column": 3
                        },
                        "end": {
                          "line": 10,
                          "column": 34
                        }
                      },
                      "range": [
                        156,
                        187
                      ],
                      "raw": "assertionの結果が一致しなかった場合は**Fail**"
                    }
                  ],
                  "raw": "",
                  "loc": {
                    "start": {
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "line": 10,
                      "column": 34
                    }
                  },
                  "range": [
                    156,
                    187
                  ]
                }
              ],
              "raw": "",
              "loc": {
                "start": {
                  "line": 12,
                  "column": 3
                },
                "end": {
                  "line": 10,
                  "column": 34
                }
              },
              "range": [
                220,
                187
              ]
            }
          ],
          "raw": "",
          "loc": {
            "start": {
              "line": 11,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 34
            }
          },
          "range": [
            190,
            187
          ]
        }
      ],
      "raw": "",
      "loc": {
        "start": {
          "line": 8,
          "column": 2
        },
        "end": {
          "line": 10,
          "column": 34
        }
      },
      "range": [
        98,
        187
      ]
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "上記のケース(Fail)に該当しなければテストがパスするということですね。",
          "loc": {
            "start": {
              "line": 15,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 37
            }
          },
          "range": [
            281,
            318
          ],
          "raw": "上記のケース(Fail)に該当しなければテストがパスするということですね。"
        }
      ],
      "loc": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 37
        }
      },
      "range": [
        281,
        318
      ],
      "raw": "上記のケース(Fail)に該当しなければテストがパスするということですね。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "つまり、ひとつのテストケースにおいて以下のことを書く必要があります。",
          "loc": {
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 34
            }
          },
          "range": [
            320,
            354
          ],
          "raw": "つまり、ひとつのテストケースにおいて以下のことを書く必要があります。"
        }
      ],
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 34
        }
      },
      "range": [
        320,
        354
      ],
      "raw": "つまり、ひとつのテストケースにおいて以下のことを書く必要があります。"
    },
    {
      "type": "List",
      "children": [
        {
          "type": "ListItem",
          "children": [
            {
              "type": "Paragraph",
              "children": [
                {
                  "type": "Str",
                  "value": "Fulfilled or Rejected どちらを期待するか",
                  "loc": {
                    "start": {
                      "line": 19,
                      "column": 2
                    },
                    "end": {
                      "line": 19,
                      "column": 33
                    }
                  },
                  "range": [
                    358,
                    389
                  ],
                  "raw": "Fulfilled or Rejected どちらを期待するか"
                }
              ],
              "loc": {
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 19,
                  "column": 33
                }
              },
              "range": [
                358,
                389
              ],
              "raw": "Fulfilled or Rejected どちらを期待するか"
            }
          ],
          "raw": "",
          "loc": {
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 19,
              "column": 33
            }
          },
          "range": [
            358,
            389
          ]
        },
        {
          "type": "ListItem",
          "children": [
            {
              "type": "Paragraph",
              "children": [
                {
                  "type": "Str",
                  "value": "assertionで渡された値のチェック",
                  "loc": {
                    "start": {
                      "line": 20,
                      "column": 2
                    },
                    "end": {
                      "line": 20,
                      "column": 22
                    }
                  },
                  "range": [
                    392,
                    412
                  ],
                  "raw": "assertionで渡された値のチェック"
                }
              ],
              "loc": {
                "start": {
                  "line": 20,
                  "column": 2
                },
                "end": {
                  "line": 20,
                  "column": 22
                }
              },
              "range": [
                392,
                412
              ],
              "raw": "assertionで渡された値のチェック"
            }
          ],
          "raw": "",
          "loc": {
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 20,
              "column": 22
            }
          },
          "range": [
            392,
            412
          ]
        }
      ],
      "raw": "",
      "loc": {
        "start": {
          "line": 19,
          "column": 2
        },
        "end": {
          "line": 20,
          "column": 22
        }
      },
      "range": [
        358,
        412
      ]
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "先ほどの `.then` を使ったコードはRejectedを期待したテストとなっていますね。",
          "loc": {
            "start": {
              "line": 22,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 46
            }
          },
          "range": [
            414,
            460
          ],
          "raw": "先ほどの `.then` を使ったコードはRejectedを期待したテストとなっていますね。"
        }
      ],
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 22,
          "column": 46
        }
      },
      "range": [
        414,
        460
      ],
      "raw": "先ほどの `.then` を使ったコードはRejectedを期待したテストとなっていますね。"
    },
    {
      "type": "CodeBlock",
      "lang": "javascript",
      "value": "promise.then(failTest, (error) => {\n    // assertでerrorをテストする\n    assert(error instanceof Error);\n});",
      "loc": {
        "start": {
          "line": 26,
          "column": 0
        },
        "end": {
          "line": 29,
          "column": 3
        }
      },
      "range": [
        487,
        588
      ],
      "raw": "promise.then(failTest, (error) => {\n    // assertでerrorをテストする\n    assert(error instanceof Error);\n});"
    },
    {
      "type": "Header",
      "depth": 3,
      "children": [
        {
          "type": "Str",
          "value": "どちらの状態になるかを明示する",
          "loc": {
            "start": {
              "line": 32,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 19
            }
          },
          "range": [
            599,
            614
          ],
          "raw": "どちらの状態になるかを明示する"
        }
      ],
      "loc": {
        "start": {
          "line": 32,
          "column": 4
        },
        "end": {
          "line": 32,
          "column": 19
        }
      },
      "range": [
        599,
        614
      ],
      "raw": "どちらの状態になるかを明示する"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "意図したテストにするためには、<<promise-states,promiseの状態>>が\nFulfilled or Rejected どちらの状態になって欲しいかを明示する必要があります。",
          "loc": {
            "start": {
              "line": 34,
              "column": 0
            },
            "end": {
              "line": 35,
              "column": 49
            }
          },
          "range": [
            616,
            711
          ],
          "raw": "意図したテストにするためには、<<promise-states,promiseの状態>>が\nFulfilled or Rejected どちらの状態になって欲しいかを明示する必要があります。"
        }
      ],
      "loc": {
        "start": {
          "line": 34,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 49
        }
      },
      "range": [
        616,
        711
      ],
      "raw": "意図したテストにするためには、<<promise-states,promiseの状態>>が\nFulfilled or Rejected どちらの状態になって欲しいかを明示する必要があります。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "しかし、`.then` だと引数は省略可能なので、テストが落ちる条件を入れ忘れる可能性もあります。",
          "loc": {
            "start": {
              "line": 37,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 49
            }
          },
          "range": [
            713,
            762
          ],
          "raw": "しかし、`.then` だと引数は省略可能なので、テストが落ちる条件を入れ忘れる可能性もあります。"
        }
      ],
      "loc": {
        "start": {
          "line": 37,
          "column": 0
        },
        "end": {
          "line": 37,
          "column": 49
        }
      },
      "range": [
        713,
        762
      ],
      "raw": "しかし、`.then` だと引数は省略可能なので、テストが落ちる条件を入れ忘れる可能性もあります。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "そこで、promiseオブジェクトに期待する状態を明示できるヘルパー関数を定義してみましょう。",
          "loc": {
            "start": {
              "line": 39,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 47
            }
          },
          "range": [
            764,
            811
          ],
          "raw": "そこで、promiseオブジェクトに期待する状態を明示できるヘルパー関数を定義してみましょう。"
        }
      ],
      "loc": {
        "start": {
          "line": 39,
          "column": 0
        },
        "end": {
          "line": 39,
          "column": 47
        }
      },
      "range": [
        764,
        811
      ],
      "raw": "そこで、promiseオブジェクトに期待する状態を明示できるヘルパー関数を定義してみましょう。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "ライブラリ化したものが https://github.com/azu/promise-test-helper[azu/promise-test-helper] にありますが、\n今回はその場で簡単に定義して進めます。",
          "loc": {
            "start": {
              "line": 43,
              "column": 0
            },
            "end": {
              "line": 44,
              "column": 19
            }
          },
          "range": [
            825,
            932
          ],
          "raw": "ライブラリ化したものが https://github.com/azu/promise-test-helper[azu/promise-test-helper] にありますが、\n今回はその場で簡単に定義して進めます。"
        }
      ],
      "loc": {
        "start": {
          "line": 43,
          "column": 0
        },
        "end": {
          "line": 44,
          "column": 19
        }
      },
      "range": [
        825,
        932
      ],
      "raw": "ライブラリ化したものが https://github.com/azu/promise-test-helper[azu/promise-test-helper] にありますが、\n今回はその場で簡単に定義して進めます。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "まずは、先ほどの `.then` の例を元にonRejectedを期待してテストできる\n`shouldRejected` というヘルパー関数を作ってみたいと思います。",
          "loc": {
            "start": {
              "line": 47,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 39
            }
          },
          "range": [
            939,
            1022
          ],
          "raw": "まずは、先ほどの `.then` の例を元にonRejectedを期待してテストできる\n`shouldRejected` というヘルパー関数を作ってみたいと思います。"
        }
      ],
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 48,
          "column": 39
        }
      },
      "range": [
        939,
        1022
      ],
      "raw": "まずは、先ほどの `.then` の例を元にonRejectedを期待してテストできる\n`shouldRejected` というヘルパー関数を作ってみたいと思います。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "`shouldRejected` にpromiseオブジェクトを渡すと、`catch` というメソッドをもつオブジェクトを返します。",
          "loc": {
            "start": {
              "line": 57,
              "column": 0
            },
            "end": {
              "line": 57,
              "column": 66
            }
          },
          "range": [
            1152,
            1218
          ],
          "raw": "`shouldRejected` にpromiseオブジェクトを渡すと、`catch` というメソッドをもつオブジェクトを返します。"
        }
      ],
      "loc": {
        "start": {
          "line": 57,
          "column": 0
        },
        "end": {
          "line": 57,
          "column": 66
        }
      },
      "range": [
        1152,
        1218
      ],
      "raw": "`shouldRejected` にpromiseオブジェクトを渡すと、`catch` というメソッドをもつオブジェクトを返します。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "この `catch` にはonRejectedで書くものと全く同じ使い方ができるので、\n`catch` の中にassertionによるテストを書けるようになっています。",
          "loc": {
            "start": {
              "line": 59,
              "column": 0
            },
            "end": {
              "line": 60,
              "column": 40
            }
          },
          "range": [
            1220,
            1304
          ],
          "raw": "この `catch` にはonRejectedで書くものと全く同じ使い方ができるので、\n`catch` の中にassertionによるテストを書けるようになっています。"
        }
      ],
      "loc": {
        "start": {
          "line": 59,
          "column": 0
        },
        "end": {
          "line": 60,
          "column": 40
        }
      },
      "range": [
        1220,
        1304
      ],
      "raw": "この `catch` にはonRejectedで書くものと全く同じ使い方ができるので、\n`catch` の中にassertionによるテストを書けるようになっています。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "`shouldRejected` で囲む以外は、通常のpromiseの処理と似た感じになるので以下のようになります。",
          "loc": {
            "start": {
              "line": 62,
              "column": 0
            },
            "end": {
              "line": 62,
              "column": 58
            }
          },
          "range": [
            1306,
            1364
          ],
          "raw": "`shouldRejected` で囲む以外は、通常のpromiseの処理と似た感じになるので以下のようになります。"
        }
      ],
      "loc": {
        "start": {
          "line": 62,
          "column": 0
        },
        "end": {
          "line": 62,
          "column": 58
        }
      },
      "range": [
        1306,
        1364
      ],
      "raw": "`shouldRejected` で囲む以外は、通常のpromiseの処理と似た感じになるので以下のようになります。"
    },
    {
      "type": "List",
      "children": [
        {
          "type": "ListItem",
          "children": [
            {
              "type": "Paragraph",
              "children": [
                {
                  "type": "Str",
                  "value": "`shouldRejected` にテスト対象のpromiseオブジェクトを渡す",
                  "loc": {
                    "start": {
                      "line": 64,
                      "column": 2
                    },
                    "end": {
                      "line": 64,
                      "column": 42
                    }
                  },
                  "range": [
                    1368,
                    1408
                  ],
                  "raw": "`shouldRejected` にテスト対象のpromiseオブジェクトを渡す"
                }
              ],
              "loc": {
                "start": {
                  "line": 64,
                  "column": 2
                },
                "end": {
                  "line": 64,
                  "column": 42
                }
              },
              "range": [
                1368,
                1408
              ],
              "raw": "`shouldRejected` にテスト対象のpromiseオブジェクトを渡す"
            }
          ],
          "raw": "",
          "loc": {
            "start": {
              "line": 64,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 42
            }
          },
          "range": [
            1368,
            1408
          ]
        },
        {
          "type": "ListItem",
          "children": [
            {
              "type": "Paragraph",
              "children": [
                {
                  "type": "Str",
                  "value": "返ってきたオブジェクトの `catch` メソッドでonRejectedの処理を書く",
                  "loc": {
                    "start": {
                      "line": 65,
                      "column": 2
                    },
                    "end": {
                      "line": 65,
                      "column": 44
                    }
                  },
                  "range": [
                    1411,
                    1453
                  ],
                  "raw": "返ってきたオブジェクトの `catch` メソッドでonRejectedの処理を書く"
                }
              ],
              "loc": {
                "start": {
                  "line": 65,
                  "column": 2
                },
                "end": {
                  "line": 65,
                  "column": 44
                }
              },
              "range": [
                1411,
                1453
              ],
              "raw": "返ってきたオブジェクトの `catch` メソッドでonRejectedの処理を書く"
            }
          ],
          "raw": "",
          "loc": {
            "start": {
              "line": 65,
              "column": 2
            },
            "end": {
              "line": 65,
              "column": 44
            }
          },
          "range": [
            1411,
            1453
          ]
        },
        {
          "type": "ListItem",
          "children": [
            {
              "type": "Paragraph",
              "children": [
                {
                  "type": "Str",
                  "value": "onRejectedにassertionによるテストを書く",
                  "loc": {
                    "start": {
                      "line": 66,
                      "column": 2
                    },
                    "end": {
                      "line": 66,
                      "column": 31
                    }
                  },
                  "range": [
                    1456,
                    1485
                  ],
                  "raw": "onRejectedにassertionによるテストを書く"
                }
              ],
              "loc": {
                "start": {
                  "line": 66,
                  "column": 2
                },
                "end": {
                  "line": 66,
                  "column": 31
                }
              },
              "range": [
                1456,
                1485
              ],
              "raw": "onRejectedにassertionによるテストを書く"
            }
          ],
          "raw": "",
          "loc": {
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 31
            }
          },
          "range": [
            1456,
            1485
          ]
        }
      ],
      "raw": "",
      "loc": {
        "start": {
          "line": 64,
          "column": 2
        },
        "end": {
          "line": 66,
          "column": 31
        }
      },
      "range": [
        1368,
        1485
      ]
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "`shouldRejected` を使った場合、Fulfilledが呼ばれるとエラーをthrowしてテストが失敗するようになっています。",
          "loc": {
            "start": {
              "line": 68,
              "column": 0
            },
            "end": {
              "line": 68,
              "column": 68
            }
          },
          "range": [
            1487,
            1555
          ],
          "raw": "`shouldRejected` を使った場合、Fulfilledが呼ばれるとエラーをthrowしてテストが失敗するようになっています。"
        }
      ],
      "loc": {
        "start": {
          "line": 68,
          "column": 0
        },
        "end": {
          "line": 68,
          "column": 68
        }
      },
      "range": [
        1487,
        1555
      ],
      "raw": "`shouldRejected` を使った場合、Fulfilledが呼ばれるとエラーをthrowしてテストが失敗するようになっています。"
    },
    {
      "type": "CodeBlock",
      "lang": "javascript",
      "value": "promise.then(failTest, (error) => {\n    assert(error.message === \"human error\");\n});\n// == ほぼ同様の意味\nshouldRejected(promise).catch((error) => {\n    assert(error.message === \"human error\");\n});",
      "loc": {
        "start": {
          "line": 72,
          "column": 0
        },
        "end": {
          "line": 78,
          "column": 3
        }
      },
      "range": [
        1582,
        1772
      ],
      "raw": "promise.then(failTest, (error) => {\n    assert(error.message === \"human error\");\n});\n// == ほぼ同様の意味\nshouldRejected(promise).catch((error) => {\n    assert(error.message === \"human error\");\n});"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "`shouldRejected` のようなヘルパー関数を使うことで、テストコードが少し直感的になりましたね。",
          "loc": {
            "start": {
              "line": 81,
              "column": 0
            },
            "end": {
              "line": 81,
              "column": 54
            }
          },
          "range": [
            1779,
            1833
          ],
          "raw": "`shouldRejected` のようなヘルパー関数を使うことで、テストコードが少し直感的になりましたね。"
        }
      ],
      "loc": {
        "start": {
          "line": 81,
          "column": 0
        },
        "end": {
          "line": 81,
          "column": 54
        }
      },
      "range": [
        1779,
        1833
      ],
      "raw": "`shouldRejected` のようなヘルパー関数を使うことで、テストコードが少し直感的になりましたね。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "同様に、promiseオブジェクトがFulfilledになることを期待する `shouldFulfilled` も書いてみましょう。",
          "loc": {
            "start": {
              "line": 86,
              "column": 0
            },
            "end": {
              "line": 86,
              "column": 66
            }
          },
          "range": [
            1914,
            1980
          ],
          "raw": "同様に、promiseオブジェクトがFulfilledになることを期待する `shouldFulfilled` も書いてみましょう。"
        }
      ],
      "loc": {
        "start": {
          "line": 86,
          "column": 0
        },
        "end": {
          "line": 86,
          "column": 66
        }
      },
      "range": [
        1914,
        1980
      ],
      "raw": "同様に、promiseオブジェクトがFulfilledになることを期待する `shouldFulfilled` も書いてみましょう。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "<<shouldRejected-test.js>>と基本は同じで、返すオブジェクトの `catch` が `then` になって中身が逆転しただけですね。",
          "loc": {
            "start": {
              "line": 95,
              "column": 0
            },
            "end": {
              "line": 95,
              "column": 78
            }
          },
          "range": [
            2113,
            2191
          ],
          "raw": "<<shouldRejected-test.js>>と基本は同じで、返すオブジェクトの `catch` が `then` になって中身が逆転しただけですね。"
        }
      ],
      "loc": {
        "start": {
          "line": 95,
          "column": 0
        },
        "end": {
          "line": 95,
          "column": 78
        }
      },
      "range": [
        2113,
        2191
      ],
      "raw": "<<shouldRejected-test.js>>と基本は同じで、返すオブジェクトの `catch` が `then` になって中身が逆転しただけですね。"
    },
    {
      "type": "Header",
      "depth": 3,
      "children": [
        {
          "type": "Str",
          "value": "まとめ",
          "loc": {
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 7
            }
          },
          "range": [
            2197,
            2200
          ],
          "raw": "まとめ"
        }
      ],
      "loc": {
        "start": {
          "line": 97,
          "column": 4
        },
        "end": {
          "line": 97,
          "column": 7
        }
      },
      "range": [
        2197,
        2200
      ],
      "raw": "まとめ"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "Promiseで意図したテストを書くためにはどうするか、またそれを補助するヘルパー関数について学びました。",
          "loc": {
            "start": {
              "line": 99,
              "column": 0
            },
            "end": {
              "line": 99,
              "column": 53
            }
          },
          "range": [
            2202,
            2255
          ],
          "raw": "Promiseで意図したテストを書くためにはどうするか、またそれを補助するヘルパー関数について学びました。"
        }
      ],
      "loc": {
        "start": {
          "line": 99,
          "column": 0
        },
        "end": {
          "line": 99,
          "column": 53
        }
      },
      "range": [
        2202,
        2255
      ],
      "raw": "Promiseで意図したテストを書くためにはどうするか、またそれを補助するヘルパー関数について学びました。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "今回書いた `shouldFulfilled` と `shouldRejected` はライブラリとして利用できるようになっています。",
          "loc": {
            "start": {
              "line": 103,
              "column": 0
            },
            "end": {
              "line": 103,
              "column": 67
            }
          },
          "range": [
            2269,
            2336
          ],
          "raw": "今回書いた `shouldFulfilled` と `shouldRejected` はライブラリとして利用できるようになっています。"
        }
      ],
      "loc": {
        "start": {
          "line": 103,
          "column": 0
        },
        "end": {
          "line": 103,
          "column": 67
        }
      },
      "range": [
        2269,
        2336
      ],
      "raw": "今回書いた `shouldFulfilled` と `shouldRejected` はライブラリとして利用できるようになっています。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "https://github.com/azu/promise-test-helper[azu/promise-test-helper] からダウンロードすることができます。",
          "loc": {
            "start": {
              "line": 105,
              "column": 0
            },
            "end": {
              "line": 105,
              "column": 86
            }
          },
          "range": [
            2338,
            2424
          ],
          "raw": "https://github.com/azu/promise-test-helper[azu/promise-test-helper] からダウンロードすることができます。"
        }
      ],
      "loc": {
        "start": {
          "line": 105,
          "column": 0
        },
        "end": {
          "line": 105,
          "column": 86
        }
      },
      "range": [
        2338,
        2424
      ],
      "raw": "https://github.com/azu/promise-test-helper[azu/promise-test-helper] からダウンロードすることができます。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "また、Node.js 10.0.0から ``assert.rejects`` と ``assert.doesNotReject`` というよく似た趣旨のassertionが提供されています。\n詳細は、 https://nodejs.org/api/assert.html[Node.jsのAPIドキュメント]を参照してください。",
          "loc": {
            "start": {
              "line": 107,
              "column": 0
            },
            "end": {
              "line": 108,
              "column": 68
            }
          },
          "range": [
            2426,
            2590
          ],
          "raw": "また、Node.js 10.0.0から ``assert.rejects`` と ``assert.doesNotReject`` というよく似た趣旨のassertionが提供されています。\n詳細は、 https://nodejs.org/api/assert.html[Node.jsのAPIドキュメント]を参照してください。"
        }
      ],
      "loc": {
        "start": {
          "line": 107,
          "column": 0
        },
        "end": {
          "line": 108,
          "column": 68
        }
      },
      "range": [
        2426,
        2590
      ],
      "raw": "また、Node.js 10.0.0から ``assert.rejects`` と ``assert.doesNotReject`` というよく似た趣旨のassertionが提供されています。\n詳細は、 https://nodejs.org/api/assert.html[Node.jsのAPIドキュメント]を参照してください。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "また、今回のヘルパー関数は<<mocha-promise,MochaのPromiseサポート>>を前提とした書き方なので、\n<<done-promise-test,`done` を使ったテスト>>では利用しにくいと思います。",
          "loc": {
            "start": {
              "line": 111,
              "column": 0
            },
            "end": {
              "line": 112,
              "column": 50
            }
          },
          "range": [
            2597,
            2709
          ],
          "raw": "また、今回のヘルパー関数は<<mocha-promise,MochaのPromiseサポート>>を前提とした書き方なので、\n<<done-promise-test,`done` を使ったテスト>>では利用しにくいと思います。"
        }
      ],
      "loc": {
        "start": {
          "line": 111,
          "column": 0
        },
        "end": {
          "line": 112,
          "column": 50
        }
      },
      "range": [
        2597,
        2709
      ],
      "raw": "また、今回のヘルパー関数は<<mocha-promise,MochaのPromiseサポート>>を前提とした書き方なので、\n<<done-promise-test,`done` を使ったテスト>>では利用しにくいと思います。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "テストフレームワークのPromiseサポートを使うか、`done` のようにコールバックスタイルのテストを使うかは、\n人それぞれのスタイルの問題であるためそこまではっきりした優劣はないと思います。",
          "loc": {
            "start": {
              "line": 114,
              "column": 0
            },
            "end": {
              "line": 115,
              "column": 39
            }
          },
          "range": [
            2711,
            2809
          ],
          "raw": "テストフレームワークのPromiseサポートを使うか、`done` のようにコールバックスタイルのテストを使うかは、\n人それぞれのスタイルの問題であるためそこまではっきりした優劣はないと思います。"
        }
      ],
      "loc": {
        "start": {
          "line": 114,
          "column": 0
        },
        "end": {
          "line": 115,
          "column": 39
        }
      },
      "range": [
        2711,
        2809
      ],
      "raw": "テストフレームワークのPromiseサポートを使うか、`done` のようにコールバックスタイルのテストを使うかは、\n人それぞれのスタイルの問題であるためそこまではっきりした優劣はないと思います。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "たとえば、 http://coffeescript.org/[CoffeeScript]でテストを書いたりすると、\nCoffeeScriptには暗黙のreturnがあるので、`done` を使ったほうが分かりやすいかもしれません。",
          "loc": {
            "start": {
              "line": 117,
              "column": 0
            },
            "end": {
              "line": 118,
              "column": 57
            }
          },
          "range": [
            2811,
            2926
          ],
          "raw": "たとえば、 http://coffeescript.org/[CoffeeScript]でテストを書いたりすると、\nCoffeeScriptには暗黙のreturnがあるので、`done` を使ったほうが分かりやすいかもしれません。"
        }
      ],
      "loc": {
        "start": {
          "line": 117,
          "column": 0
        },
        "end": {
          "line": 118,
          "column": 57
        }
      },
      "range": [
        2811,
        2926
      ],
      "raw": "たとえば、 http://coffeescript.org/[CoffeeScript]でテストを書いたりすると、\nCoffeeScriptには暗黙のreturnがあるので、`done` を使ったほうが分かりやすいかもしれません。"
    },
    {
      "type": "Paragraph",
      "children": [
        {
          "type": "Str",
          "value": "Promiseのテストは普通に非同期関数のテスト以上に落とし穴があるため、\nどのスタイルを取るかは自由ですが、一貫性を持った書き方をすることが大切だといえます。",
          "loc": {
            "start": {
              "line": 120,
              "column": 0
            },
            "end": {
              "line": 121,
              "column": 42
            }
          },
          "range": [
            2928,
            3008
          ],
          "raw": "Promiseのテストは普通に非同期関数のテスト以上に落とし穴があるため、\nどのスタイルを取るかは自由ですが、一貫性を持った書き方をすることが大切だといえます。"
        }
      ],
      "loc": {
        "start": {
          "line": 120,
          "column": 0
        },
        "end": {
          "line": 121,
          "column": 42
        }
      },
      "range": [
        2928,
        3008
      ],
      "raw": "Promiseのテストは普通に非同期関数のテスト以上に落とし穴があるため、\nどのスタイルを取るかは自由ですが、一貫性を持った書き方をすることが大切だといえます。"
    }
  ],
  "loc": {
    "start": {
      "line": 2,
      "column": 3
    },
    "end": {
      "line": 121,
      "column": 42
    }
  },
  "range": [
    26,
    3008
  ],
  "raw": "[[controllable-tests]]\n== 意図したテストを書くには\n\nここでいう意図したテストとは以下のような定義で進めます。\n\nあるpromiseオブジェクトをテスト対象として\n\n* Fulfilledされることを期待したテストを書いた時\n** Rejectedとなった場合は**Fail**\n** assertionの結果が一致しなかった場合は**Fail**\n* Rejectedされることを期待したテストを書いた時\n** Fulfilledとなった場合は**Fail**\n** assertionの結果が一致しなかった場合は**Fail**\n\n上記のケース(Fail)に該当しなければテストがパスするということですね。\n\nつまり、ひとつのテストケースにおいて以下のことを書く必要があります。\n\n* Fulfilled or Rejected どちらを期待するか\n* assertionで渡された値のチェック\n\n先ほどの `.then` を使ったコードはRejectedを期待したテストとなっていますね。\n\n[source,javascript]\n----\npromise.then(failTest, (error) => {\n    // assertでerrorをテストする\n    assert(error instanceof Error);\n});\n----\n\n=== どちらの状態になるかを明示する\n\n意図したテストにするためには、<<promise-states,promiseの状態>>が\nFulfilled or Rejected どちらの状態になって欲しいかを明示する必要があります。\n\nしかし、`.then` だと引数は省略可能なので、テストが落ちる条件を入れ忘れる可能性もあります。\n\nそこで、promiseオブジェクトに期待する状態を明示できるヘルパー関数を定義してみましょう。\n\n[NOTE]\n====\nライブラリ化したものが https://github.com/azu/promise-test-helper[azu/promise-test-helper] にありますが、\n今回はその場で簡単に定義して進めます。\n====\n\nまずは、先ほどの `.then` の例を元にonRejectedを期待してテストできる\n`shouldRejected` というヘルパー関数を作ってみたいと思います。\n\n[[shouldRejected-test.js]]\n.shouldRejected-test.js\n[source,javascript]\n----\ninclude::embed/embed-shouldRejected-test.js[]\n----\n\n`shouldRejected` にpromiseオブジェクトを渡すと、`catch` というメソッドをもつオブジェクトを返します。\n\nこの `catch` にはonRejectedで書くものと全く同じ使い方ができるので、\n`catch` の中にassertionによるテストを書けるようになっています。\n\n`shouldRejected` で囲む以外は、通常のpromiseの処理と似た感じになるので以下のようになります。\n\n. `shouldRejected` にテスト対象のpromiseオブジェクトを渡す\n. 返ってきたオブジェクトの `catch` メソッドでonRejectedの処理を書く\n. onRejectedにassertionによるテストを書く\n\n`shouldRejected` を使った場合、Fulfilledが呼ばれるとエラーをthrowしてテストが失敗するようになっています。\n\n[source,javascript]\n----\npromise.then(failTest, (error) => {\n    assert(error.message === \"human error\");\n});\n// == ほぼ同様の意味\nshouldRejected(promise).catch((error) => {\n    assert(error.message === \"human error\");\n});\n----\n\n`shouldRejected` のようなヘルパー関数を使うことで、テストコードが少し直感的になりましたね。\n\n.Promise onRejected test\nimage::img/promise-test.png[Promise onRejected test]\n\n同様に、promiseオブジェクトがFulfilledになることを期待する `shouldFulfilled` も書いてみましょう。\n\n[[shouldFulfilled-test.js]]\n.shouldFulfilled-test.js\n[source,javascript]\n----\ninclude::embed/embed-shouldFulfilled-test.js[]\n----\n\n<<shouldRejected-test.js>>と基本は同じで、返すオブジェクトの `catch` が `then` になって中身が逆転しただけですね。\n\n=== まとめ\n\nPromiseで意図したテストを書くためにはどうするか、またそれを補助するヘルパー関数について学びました。\n\n[NOTE]\n====\n今回書いた `shouldFulfilled` と `shouldRejected` はライブラリとして利用できるようになっています。\n\nhttps://github.com/azu/promise-test-helper[azu/promise-test-helper] からダウンロードすることができます。\n\nまた、Node.js 10.0.0から ``assert.rejects`` と ``assert.doesNotReject`` というよく似た趣旨のassertionが提供されています。\n詳細は、 https://nodejs.org/api/assert.html[Node.jsのAPIドキュメント]を参照してください。\n====\n\nまた、今回のヘルパー関数は<<mocha-promise,MochaのPromiseサポート>>を前提とした書き方なので、\n<<done-promise-test,`done` を使ったテスト>>では利用しにくいと思います。\n\nテストフレームワークのPromiseサポートを使うか、`done` のようにコールバックスタイルのテストを使うかは、\n人それぞれのスタイルの問題であるためそこまではっきりした優劣はないと思います。\n\nたとえば、 http://coffeescript.org/[CoffeeScript]でテストを書いたりすると、\nCoffeeScriptには暗黙のreturnがあるので、`done` を使ったほうが分かりやすいかもしれません。\n\nPromiseのテストは普通に非同期関数のテスト以上に落とし穴があるため、\nどのスタイルを取るかは自由ですが、一貫性を持った書き方をすることが大切だといえます。"
}
